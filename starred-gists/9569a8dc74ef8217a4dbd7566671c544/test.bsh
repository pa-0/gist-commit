#!/usr/bin/env bash
set -eu

# Smoke test for testing ouy git_mirror + push_to_mirror + clone_from_mirror
# Only works on git 1.8 or newer (Uses the git -c option near the end)

CWD="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)"

function cleanup()
{
  IFS= read -d '' -n 1 -rsp "Press any key to continue..."
  rm -rf "${temp_dir}"
}
temp_dir="$(mktemp -d)"
trap 'cleanup' EXIT

# Better way to take care of committers on vanilla
export GIT_COMMITTER_NAME='Foo Bar'
export GIT_COMMITTER_EMAIL='foo.bar@example.com'

# 1 - Simulate a git repo
BUILD_REPO="${temp_dir}/build_repo"
mkdir -p "${BUILD_REPO}"
pushd "${BUILD_REPO}" &> /dev/null
  git init
  touch readme
  git add readme
  git commit -m "Initial commit"

  if [ "${OS-}" = "Windows_NT" ]; then
    git submodule add https://github.com/visionsystemsinc/vsi_common.git 'diff  i  cult'
    difficult=$'diff  i  cult'
  else
    # This won't actually create a newline in the name, it just ignores it
    git submodule add https://github.com/visionsystemsinc/vsi_common.git $'  diff  i \t cult'
    # git submodule add https://github.com/visionsystemsinc/vsi_common $'  diff\ticult\n'
    # This will.
    git mv $'  diff  i \t cult' $'diff  i \t cult'

    difficult=$'diff  i \t cult'
  fi
  git submodule add https://bitbucket.org/andyneff/lfs_sample.git lfs
  # git mv lfs $'\nlfs\t\t'
  # git mv lfs $'lfs\t\t'
  git commit -m "Added submodules"
popd &> /dev/null

# 2 - Simulate github
PRETEND_REPO="${temp_dir}/pretend_repo"
mkdir -p "${PRETEND_REPO}"
pushd "${PRETEND_REPO}" &> /dev/null
  git clone --mirror "${BUILD_REPO}" .
popd &> /dev/null

# 3 - Simulate mirror
pushd "${temp_dir}" &> /dev/null
  "${CWD}/git_mirror" mirror "${PRETEND_REPO}"
  PREP_DIR="${temp_dir}/pretend_repo_prep"
  PREP_FILE=("${PREP_DIR}/"transfer_*.tgz)
  "${CWD}/git_mirror" mirror "${PREP_DIR}"
popd &> /dev/null

# 4 - Simulate transfer
TRANSFER_DIR="${temp_dir}/transfer"
mkdir -p "${TRANSFER_DIR}"
pushd "${TRANSFER_DIR}" &> /dev/null
  tar zxf "${PREP_FILE[0]}"
popd &> /dev/null

# 5 - Simulate a mirror upload
MIRROR_DIR="${temp_dir}/mirror"
cat - << EOF > "${TRANSFER_DIR}/info.env"
repos[.]="${MIRROR_DIR}/main"
repos[lfs]="${MIRROR_DIR}/lfs"
repos['${difficult}']="${MIRROR_DIR}"/'${difficult}'
repos['${difficult}/docker/recipes']="${MIRROR_DIR}/recipes"
EOF

for d in main lfs vxl "${difficult}" recipes; do
  mkdir -p "${MIRROR_DIR}/${d}"
  pushd "${MIRROR_DIR}/${d}" &> /dev/null
    git init --bare
  popd &> /dev/null
done

# source /opt/projects/terra/terra_dsm/external/terra/external/vsi_common/linux/debug.bsh
# JUST_DEBUG_READ_METHOD=python
# trap set_trace ERR

# Setup lfs-folderstore

if [ "${OS-}" = "Windows_NT" ]; then
  os=windows-amd64
elif [[ ${OSTYPE} = darwin* ]]; then
  os=darwin-amd64
else
  os=linux-amd64
fi

pushd "${temp_dir}" &> /dev/null
  curl -Lo "lfs.zip" "https://github.com/sinbad/lfs-folderstore/releases/download/v1.0.0/lfs-folderstore-${os}-v1.0.0.zip"
  unzip lfs.zip
  chmod 755 lfs-folderstore-${os}/lfs-folderstore
popd &> /dev/null

echo '#!/usr/bin/env bash
git -c lfs.customtransfer.lfs-folder.path="'"${temp_dir}/lfs-folderstore-${os}/lfs-folderstore"'" -c lfs.customtransfer.lfs-folder.args="'"${temp_dir}/mirror/lfs/lfs/objects"'" -c lfs.standalonetransferagent=lfs-folder ${@+"${@}"}' > "${temp_dir}/git2"
chmod 755 "${temp_dir}/git2"
export GIT="${temp_dir}/git2"
# The lfs-folderstore will not work unless the dir exists :(
mkdir -p "${temp_dir}/mirror/lfs/lfs/objects"

"${CWD}/git_mirror" push "${TRANSFER_DIR}/info.env" "${TRANSFER_DIR}"

# # Fake an LFS push, using lfs-folderstore for the repo called "lfs"
# # Create a local lfs store
# # cp -ra "${PREP_DIR}"/*/lfs/lfs "${temp_dir}/"
# # This only works in newer git
# echo '#!/usr/bin/env bash
# git -c lfs.customtransfer.lfs-folder.path="'"${temp_dir}/lfs-folderstore-${os}/lfs-folderstore"'" -c lfs.customtransfer.lfs-folder.args="'"${temp_dir}/lfs/objects"'" -c lfs.standalonetransferagent=lfs-folder ${@+"${@}"}' > "${temp_dir}/git2"
# chmod 755 "${temp_dir}/git2"
# export GIT="${temp_dir}/git2"

# 6 - Simulate cloning from mirror

CLONE_DIR="${temp_dir}/clone"
"${CWD}/git_mirror" clone "${TRANSFER_DIR}/info.env" "${CLONE_DIR}"

echo $'\x1b[0m'"Checking..."
set -xv
[[ -f "${CLONE_DIR}/${difficult}/setup.env" ]]
[[ -f "${CLONE_DIR}/${difficult}/docker/recipes/README.rst" ]]
# The following test fails on Ubuntu 16.04 git 2.17.1 git-lfs. The reason is
# that git submodule update (and git clone --recursive) do not do a lfs
# checkout... the exact cause of this is unknown, but it's probably a known
# bug that's been fixed, or that's my guess
# git clone https://bitbucket.org/andyneff/lfs_sample.git doesn't even work!
[[ $(sha256sum ${CLONE_DIR}/lfs/heart.jpg | awk '{print $1}') == 259e5122c42220369b8ee2f3570858e08db668bda9832cd96233ed4e11ae9e25 ]]
set +xv
echo "Success!"
