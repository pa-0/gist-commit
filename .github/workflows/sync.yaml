name: Sync GitHub Gists
on:
  workflow_dispatch:
env:
  BUILD_DIR_PATH: ${{github.workspace}}/build
  TAG: ${{github.ref_name}}
  permission: write
jobs:
  sync:
    runs-on: ubuntu-20.04
    steps:
    - name: 'Gist to GitHub Import'
      id: strings
      shell: bash
      run: |
        data="$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{secrets.API_TOKEN}}" -H "X-GitHub-Api-Version: 2022-11-28" 'https://api.github.com/users/pa-0/gists')"
        
        IFS=$' ' # parsing the string
        urls="$(echo "$data" | jq -r .[].files | jq -r .[].raw_url)"
        descriptions="$(echo "$data" | jq -r .[].description)"
        nb_comments="$(echo "$data" | jq -r .[].comments)"
        comments_urls="$(echo "$data" | jq -r .[].comments_url)"
        
        IFS=$'\n' # parsing the array
        urls=($urls)
        descriptions=($descriptions)
        nb_comments=($nb_comments)
        comments_urls=($comments_urls)
        
        index=0
        
        for url in "${urls[@]}"
        do
        	gist="$(curl -s $url)"
        
        	filename="$(echo $url | cut -f8 -d /)" # parse url to get filename
        
        	subfolder="$filename"
        	mkdir "$subfolder" 2>/dev/null # create directory for each gist
        
        	readme="$subfolder/README.md"
        
        	echo "${descriptions[index]}" > "$readme" # write gist description
        	echo -e "---------------\n" >> "$readme"
        	echo -n "### " >> "$readme" # url will be h3 in markdown
        	echo "$data" | jq -r .["$index"].html_url >> "$readme" # write url to gist.github.com
        	echo "$gist" > "$subfolder"/"$filename" # write code
        	if [ "${nb_comments[index]}" -ne 0 ]
        	then
        	    comment="$(curl -s ${comments_urls[index]})"
        	    comment_body="$(echo $comment | jq -r .[].body)"
        	    echo -e "---------------\n\n" >> "$readme"
        	    echo "$comment_body" >> "$readme" # write comments in README if there are any
        	fi
        
        	echo -e "\e[033m" "$filename" : "\e[32m" DONE "\e[0m\n"
        	let "index+=1"
        done
        
        - name: Add & Commit
          # You may pin to the exact commit or the version.
          # uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5
          uses: EndBug/add-and-commit@v9.1.4
          with:
            # Arguments for the git add command
            add: # optional, default is .
            # The name of the user that will be displayed as the author of the commit
            author_name: # optional
            # The email of the user that will be displayed as the author of the commit
            author_email: # optional
            # Additional arguments for the git commit command
            commit: # optional
            # The name of the custom committer you want to use
            committer_name: # optional
            # The email of the custom committer you want to use
            committer_email: # optional
            # The directory where your repository is located. You should use actions/checkout first to set it up
            cwd: # optional, default is .
            # How the action should fill missing author name or email.
            default_author: # optional, default is github_actor
            # Arguments for the git fetch command (if 'false', the action won't fetch the repo)
            fetch: # optional, default is --tags --force
            # The message for the commit
            message: # optional
            # The name of the branch to create.
            new_branch: # optional
            # The way the action should handle pathspec errors from the add and remove commands.
            pathspec_error_handling: # optional, default is ignore
            # Arguments for the git pull command. By default, the action does not pull.
            pull: # optional
            # Whether to push the commit and, if any, its tags to the repo. It can also be used to set the git push arguments (more info in the README)
            push: # optional, default is true
            # Arguments for the git rm command
            remove: # optional
            # Arguments for the git tag command (the tag name always needs to be the first word not preceded by a hyphen)
            tag: # optional
            # Arguments for the git push --tags command (any additional argument will be added after --tags)
            tag_push: # optional
            # The token used to make requests to the GitHub API. It's NOT used to make commits and should not be changed.
            github_token: # optional, default is ${{ github.token }}
